pipeline {
    agent any
    tools {
        maven 'Maven 3'
        jdk 'JDK 21 Linux'
    }
    environment {
        DOCKER_IMAGE = "papadooo/freelance-backend:${env.BUILD_NUMBER}"
        SPRING_PROFILES_ACTIVE = 'test'
    }
    stages {
        stage('Checkout') {
            steps {
                // Checkout code from GitHub repository
                git branch: 'test-branch', url: 'https://github.com/naasssssty/Freelance.git'
            }
        }
        
        stage('Compile') {
            steps {
                echo 'Compiling the backend application...'
                sh 'mvn clean compile -DskipTests'
            }
        }
        
        stage('Unit Tests') {
            environment {
                // Ensure tests use an in-memory database and test profile
                SPRING_PROFILES_ACTIVE = 'test'
                SPRING_DATASOURCE_URL = 'jdbc:h2:mem:testdb'
                SPRING_DATASOURCE_USERNAME = 'sa'
                SPRING_DATASOURCE_PASSWORD = ''
                SPRING_DATASOURCE_DRIVER_CLASS_NAME = 'org.h2.Driver'
                SPRING_JPA_DATABASE_PLATFORM = 'org.hibernate.dialect.H2Dialect'
                SPRING_JPA_HIBERNATE_DDL_AUTO = 'create-drop'
            }
            steps {
                echo 'Running unit tests...'
                sh 'mvn test -Dspring.profiles.active=test'
            }
            post {
                always {
                    // Publish unit test results
                    junit(
                        allowEmptyResults: true,
                        testResults: '**/target/surefire-reports/*.xml'
                    )
                }
            }
        }
        
        stage('Integration Tests') {
            environment {
                // Same test environment configuration
                SPRING_PROFILES_ACTIVE = 'test'
                SPRING_DATASOURCE_URL = 'jdbc:h2:mem:testdb'
                SPRING_DATASOURCE_USERNAME = 'sa'
                SPRING_DATASOURCE_PASSWORD = ''
                SPRING_DATASOURCE_DRIVER_CLASS_NAME = 'org.h2.Driver'
                SPRING_JPA_DATABASE_PLATFORM = 'org.hibernate.dialect.H2Dialect'
                SPRING_JPA_HIBERNATE_DDL_AUTO = 'create-drop'
            }
            steps {
                echo 'Running integration tests...'
                // Run integration tests (currently only context loading, but prepared for more)
                sh 'mvn verify -Dspring.profiles.active=test -DskipUnitTests=true'
            }
            post {
                always {
                    // Publish integration test results
                    junit(
                        allowEmptyResults: true,
                        testResults: '**/target/failsafe-reports/*.xml'
                    )
                }
            }
        }
        
        stage('Code Coverage') {
            steps {
                echo 'Generating code coverage report...'
                // Generate JaCoCo coverage report (if plugin is added later)
                script {
                    try {
                        sh 'mvn jacoco:report'
                        echo 'Code coverage report generated successfully'
                    } catch (Exception e) {
                        echo 'JaCoCo plugin not configured yet - skipping coverage report'
                    }
                }
            }
            post {
                always {
                    script {
                        // Skip HTML publishing until plugin is installed
                        echo 'HTML Publisher plugin not available - skipping coverage report publishing'
                    }
                }
            }
        }
        
        stage('Quality Gates') {
            steps {
                echo 'Evaluating quality gates...'
                script {
                    // Basic quality checks
                    def testResults = readFile('target/surefire-reports/TEST-*.xml')
                    if (testResults.contains('failures="0"') && testResults.contains('errors="0"')) {
                        echo '✅ All tests passed - Quality gate: PASSED'
                    } else {
                        echo '❌ Some tests failed - Quality gate: FAILED'
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('Package') {
            steps {
                echo 'Packaging the application...'
                sh 'mvn package -DskipTests'
            }
        }
        
        stage('Build Docker Image') {
            when {
                // Only build Docker image if all quality gates pass
                expression { currentBuild.result != 'UNSTABLE' }
            }
            steps {
                echo 'Building Docker image...'
                // Build Docker image for backend using the correct Dockerfile
                sh 'docker build -t $DOCKER_IMAGE -f docker/Dockerfile.backend .'
            }
        }
        
        stage('Push Docker Image') {
            when {
                // Only push if all previous stages succeeded
                expression { currentBuild.result != 'UNSTABLE' }
            }
            steps {
                echo 'Pushing Docker image to registry...'
                // Push Docker image to Docker Hub
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                    sh 'docker push $DOCKER_IMAGE'
                }
            }
        }
    }
    post {
        always {
            echo 'Backend pipeline completed.'
            // Archive test reports
            archiveArtifacts(
                artifacts: '**/target/surefire-reports/*.xml, **/target/failsafe-reports/*.xml',
                allowEmptyArchive: true
            )
            // Σχολιάζουμε το cleanWs μέχρι να εγκατασταθεί το Workspace Cleanup Plugin
            // cleanWs()
        }
        success {
            echo '✅ Backend pipeline completed successfully!'
            echo 'Docker image built and pushed: ' + env.DOCKER_IMAGE
        }
        failure {
            echo '❌ Backend pipeline failed. Check the logs for details.'
        }
        unstable {
            echo '⚠️ Backend pipeline completed with warnings. Some quality gates failed.'
        }
    }
} 