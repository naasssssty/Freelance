pipeline {
    agent any
    tools {
        maven 'Maven 3'
        jdk 'JDK 21 Linux'
    }
    environment {
        DOCKER_IMAGE = "papadooo/freelance-backend:${env.BUILD_NUMBER}"
        SPRING_PROFILES_ACTIVE = 'test'
    }
    stages {
        stage('Checkout') {
            steps {
                // Checkout code from GitHub repository
                git branch: 'test-branch', url: 'https://github.com/naasssssty/Freelance.git'
            }
        }
        stage('Build and Test') {
            environment {
                // Ensure tests use an in-memory database and test profile
                SPRING_PROFILES_ACTIVE = 'test'
                SPRING_DATASOURCE_URL = 'jdbc:h2:mem:testdb'
                SPRING_DATASOURCE_USERNAME = 'sa'
                SPRING_DATASOURCE_PASSWORD = ''
                SPRING_DATASOURCE_DRIVER_CLASS_NAME = 'org.h2.Driver'
                SPRING_JPA_DATABASE_PLATFORM = 'org.hibernate.dialect.H2Dialect'
                SPRING_JPA_HIBERNATE_DDL_AUTO = 'create-drop'
            }
            steps {
                // Build the backend using Maven with explicit test profile
                sh 'mvn clean install -Ptest -Dspring.profiles.active=test'
            }
            post {
                always {
                    // Publish test results
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                // Build Docker image for backend using the correct Dockerfile
                sh 'docker build -t $DOCKER_IMAGE -f docker/Dockerfile.backend .'
            }
        }
        stage('Push Docker Image') {
            steps {
                // Push Docker image to Docker Hub
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                    sh 'docker push $DOCKER_IMAGE'
                }
            }
        }
    }
    post {
        always {
            // Σχολιάζουμε το cleanWs μέχρι να εγκατασταθεί το Workspace Cleanup Plugin
            // cleanWs()
            echo 'Backend pipeline completed.'
        }
        success {
            echo 'Backend pipeline completed successfully!'
        }
        failure {
            echo 'Backend pipeline failed. Check the logs for details.'
        }
    }
} 