pipeline {
    agent any
    tools {
        maven 'Maven 3'
        jdk 'JDK 21 Linux'
    }
    environment {
        DOCKER_IMAGE = "papadooo/freelance-backend:${env.BUILD_NUMBER}"
        SPRING_PROFILES_ACTIVE = 'test'
    }
    stages {
        stage('Compile') {
            steps {
                echo 'Compiling the backend application...'
                sh 'mvn clean compile -DskipTests'
            }
        }
        
        stage('Unit Tests') {
            environment {
                // Ensure tests use an in-memory database and test profile
                SPRING_PROFILES_ACTIVE = 'test'
                SPRING_DATASOURCE_URL = 'jdbc:h2:mem:testdb'
                SPRING_DATASOURCE_USERNAME = 'sa'
                SPRING_DATASOURCE_PASSWORD = ''
                SPRING_DATASOURCE_DRIVER_CLASS_NAME = 'org.h2.Driver'
                SPRING_JPA_DATABASE_PLATFORM = 'org.hibernate.dialect.H2Dialect'
                SPRING_JPA_HIBERNATE_DDL_AUTO = 'create-drop'
            }
            steps {
                echo 'Running unit tests...'
                sh 'mvn test -Dspring.profiles.active=test'
            }
            post {
                always {
                    // Publish unit test results
                    junit(
                        allowEmptyResults: true,
                        testResults: '**/target/surefire-reports/*.xml'
                    )
                }
            }
        }
        
        stage('Integration Tests') {
            environment {
                // Same test environment as unit tests
                SPRING_PROFILES_ACTIVE = 'test'
                SPRING_DATASOURCE_URL = 'jdbc:h2:mem:integrationtestdb'
                SPRING_DATASOURCE_USERNAME = 'sa'
                SPRING_DATASOURCE_PASSWORD = ''
                SPRING_DATASOURCE_DRIVER_CLASS_NAME = 'org.h2.Driver'
                SPRING_JPA_DATABASE_PLATFORM = 'org.hibernate.dialect.H2Dialect'
                SPRING_JPA_HIBERNATE_DDL_AUTO = 'create-drop'
            }
            steps {
                echo 'Running integration tests...'
                // Run integration tests using test-compile goal to ensure fresh compilation
                sh 'mvn test-compile'
                sh 'mvn surefire:test -Dtest=TestFreelancerProjectApplicationTests -Dspring.profiles.active=test'
            }
            post {
                always {
                    // Archive integration test results
                    archiveArtifacts(
                        artifacts: '**/target/surefire-reports/TEST-*TestFreelancerProjectApplicationTests.xml',
                        allowEmptyArchive: true
                    )
                }
            }
        }
        
        stage('Package') {
            steps {
                echo 'Packaging the application...'
                sh 'mvn package -DskipTests'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                // Build Docker image for backend using the correct Dockerfile
                sh 'docker build -t $DOCKER_IMAGE -f docker/Dockerfile.backend .'
                // Tag with latest for local use
                sh 'docker tag $DOCKER_IMAGE papadooo/freelance-backend:latest'
            }
        }
        
        stage('Push Docker Image') {
            steps {
                echo 'Pushing Docker image to registry...'
                // Push Docker image to Docker Hub
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                    sh 'docker push $DOCKER_IMAGE'
                    sh 'docker push papadooo/freelance-backend:latest'
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'kubeconfig-secret', variable: 'KUBECONFIG_PATH')]) {
                        def patchedKubeconfig = "/tmp/kubeconfig_final_${env.BUILD_NUMBER}.yaml"
                        
                        echo 'üöÄ Preparing for Kubernetes deployment...'
                        
                        // Create a patched kubeconfig for use inside the container
                        sh """
                            echo "üìÑ Creating patched kubeconfig from credentials..."
                            cp "\$KUBECONFIG_PATH" "${patchedKubeconfig}"
                            
                            # 1. Replace server IP with host.docker.internal for container access from localhost
                            sed -i 's#server: https://127.0.0.1:8443#server: https://host.docker.internal:8443#' "${patchedKubeconfig}"
                            
                            # 2. Remove certificate authority to prepare for insecure skip
                            sed -i '/certificate-authority-data/d' "${patchedKubeconfig}"
                            
                            # 3. Add insecure-skip-tls-verify: true under the cluster definition
                            # Use a temporary file for awk output to safely overwrite the original
                            awk '/- cluster:/ {print; print "    insecure-skip-tls-verify: true"; next}1' "${patchedKubeconfig}" > "${patchedKubeconfig}.tmp" && mv "${patchedKubeconfig}.tmp" "${patchedKubeconfig}"

                            echo "‚úÖ Kubeconfig patched successfully: ${patchedKubeconfig}"
                        """
                        
                        // Set the patched kubeconfig for subsequent commands
                        env.KUBECONFIG = patchedKubeconfig
                        
                        // Test connectivity with timeout
                        sh '''
                            echo "üîç Testing Kubernetes connectivity..."
                            timeout 60s kubectl cluster-info --kubeconfig=$KUBECONFIG || {
                                echo "‚ùå Kubernetes connectivity failed"
                                exit 1
                            }
                            echo "‚úÖ Kubernetes connectivity confirmed"
                        '''
                        
                        // Ensure namespace exists
                        sh '''
                            echo "üìÅ Ensuring namespace exists..."
                            kubectl create namespace freelance --kubeconfig=$KUBECONFIG --dry-run=client -o yaml | kubectl apply --kubeconfig=$KUBECONFIG -f -
                        '''
                        
                        // Deploy using Ansible with correct image tag and kubeconfig path
                        sh """
                            echo "üöÄ Deploying backend with image: $DOCKER_IMAGE"
                            ansible-playbook ansible/deploy-kubernetes.yml -i ansible/inventory.yml \\
                                --extra-vars "backend_image=$DOCKER_IMAGE" \\
                                --extra-vars "kubeconfig_path=$KUBECONFIG" \\
                                -v
                        """
                        
                        // Wait for application services to be ready
                        sh '''
                            echo "‚è≥ Waiting for application services to be ready..."
                            sleep 30 
                            echo "Waiting for backend pods..."
                            kubectl wait --for=condition=ready pod -l app=backend -n freelance --timeout=300s --kubeconfig=$KUBECONFIG
                            echo "‚úÖ Backend services are ready."
                        '''
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Backend pipeline completed.'
            // Archive test reports
            archiveArtifacts(
                artifacts: '**/target/surefire-reports/*.xml',
                allowEmptyArchive: true
            )
            // Clean up temporary files
            sh 'rm -f /tmp/kubeconfig_*.yaml || true'
        }
        success {
            echo '‚úÖ Backend pipeline completed successfully!'
            echo 'Docker image built and pushed: ' + env.DOCKER_IMAGE
        }
        failure {
            echo '‚ùå Backend pipeline failed. Check the logs for details.'
        }
    }
} 