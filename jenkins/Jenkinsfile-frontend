pipeline {
    agent any
    tools {
        nodejs 'Node 21'
    }
    environment {
        IMAGE_TAG = '28'
        IMAGE_NAME = "papadooo/freelance-frontend:${IMAGE_TAG}"
        CI = 'true'
        GENERATE_SOURCEMAP = 'false'
    }
    stages {
        stage('Checkout') {
            steps {
                // Καθαρίζουμε πρώτα τον workspace
                cleanWs()
                
                // Checkout code from GitHub repository με περισσότερες λεπτομέρειες
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'Α']],
                    extensions: [[$class: 'CloneOption', depth: 1, noTags: false, reference: '', shallow: true]],
                    userRemoteConfigs: [[url: 'https://github.com/naasssssty/Freelance.git']]
                ])
            }
        }
        stage('Install Dependencies') {
            steps {
                // Install npm dependencies for frontend
                dir('frontend') {
                    sh 'npm ci --prefer-offline --no-audit'
                }
            }
        }
        stage('Lint') {
            steps {
                // Run ESLint for code quality
                dir('frontend') {
                    sh 'npm run lint || true'
                }
            }
        }
        stage('Unit Tests') {
            steps {
                // Run unit tests with coverage
                dir('frontend') {
                    sh 'npm test -- --coverage --testResultsProcessor=jest-junit --coverageReporters=text-lcov --coverageReporters=html --coverageReporters=cobertura'
                }
            }
            post {
                always {
                    // Publish test results
                    script {
                        try {
                            publishTestResults testResultsPattern: 'frontend/junit.xml', allowEmptyResults: true
                        } catch (Exception e) {
                            echo "Could not publish test results: ${e.getMessage()}"
                        }
                    }
                    // Publish coverage reports
                    script {
                        try {
                            publishHTML([
                                allowMissing: true,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'frontend/coverage/lcov-report',
                                reportFiles: 'index.html',
                                reportName: 'Coverage Report'
                            ])
                        } catch (Exception e) {
                            echo "Could not publish coverage report: ${e.getMessage()}"
                        }
                    }
                }
            }
        }
        stage('Build') {
            steps {
                // Build the frontend using npm
                dir('frontend') {
                    sh 'npm run build'
                }
            }
            post {
                always {
                    // Archive build artifacts
                    archiveArtifacts artifacts: 'frontend/build/**/*', fingerprint: true, allowEmptyArchive: true
                }
            }
        }
        stage('Security Audit') {
            steps {
                // Run npm audit for security vulnerabilities
                dir('frontend') {
                    sh 'npm audit --audit-level=moderate || true'
                }
            }
        }
        stage('Check Docker Access') {
            steps {
                // Check if Docker is accessible
                script {
                    try {
                        sh 'docker info'
                        echo 'Docker is accessible'
                    } catch (Exception e) {
                        echo "Docker access failed: ${e.getMessage()}"
                        echo "Skipping Docker stages"
                        env.SKIP_DOCKER = 'true'
                    }
                }
            }
        }
        stage('Build Docker Image') {
            when {
                not { environment name: 'SKIP_DOCKER', value: 'true' }
            }
            steps {
                script {
                    try {
                        dir('.') {
                            sh "docker build -f docker/Dockerfile.frontend -t ${IMAGE_NAME} frontend/"
                        }
                    } catch (Exception e) {
                        echo "Docker build failed: ${e.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        stage('Push Docker Image') {
            when {
                not { environment name: 'SKIP_DOCKER', value: 'true' }
            }
            steps {
                script {
                    try {
                        withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                            sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                            sh "docker push ${IMAGE_NAME}"
                        }
                    } catch (Exception e) {
                        echo "Docker push failed: ${e.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        stage('Cleanup') {
            steps {
                script {
                    try {
                        // Clean up Docker images to save space
                        sh "docker rmi ${IMAGE_NAME} || true"
                        sh 'docker system prune -f || true'
                    } catch (Exception e) {
                        echo "Docker cleanup failed: ${e.getMessage()}"
                    }
                }
            }
        }
    }
    post {
        always {
            // Clean workspace
            cleanWs()
            echo 'Frontend pipeline completed.'
        }
        success {
            echo 'Frontend pipeline completed successfully!'
            // Send notification on success
            script {
                try {
                    emailext (
                        subject: "✅ Frontend Pipeline Success - Build #${env.BUILD_NUMBER}",
                        body: "The frontend pipeline has completed successfully.\n\nBuild: ${env.BUILD_URL}",
                        to: "${env.CHANGE_AUTHOR_EMAIL ?: 'admin@example.com'}"
                    )
                } catch (Exception e) {
                    echo "Could not send email notification: ${e.getMessage()}"
                }
            }
        }
        failure {
            echo 'Frontend pipeline failed. Check the logs for details.'
            // Send notification on failure
            script {
                try {
                    emailext (
                        subject: "❌ Frontend Pipeline Failed - Build #${env.BUILD_NUMBER}",
                        body: "The frontend pipeline has failed.\n\nBuild: ${env.BUILD_URL}\n\nPlease check the logs for details.",
                        to: "${env.CHANGE_AUTHOR_EMAIL ?: 'admin@example.com'}"
                    )
                } catch (Exception e) {
                    echo "Could not send email notification: ${e.getMessage()}"
                }
            }
        }
        unstable {
            echo 'Frontend pipeline completed with warnings.'
            // Send notification on unstable build
            script {
                try {
                    emailext (
                        subject: "⚠️ Frontend Pipeline Unstable - Build #${env.BUILD_NUMBER}",
                        body: "The frontend pipeline completed with warnings.\n\nBuild: ${env.BUILD_URL}",
                        to: "${env.CHANGE_AUTHOR_EMAIL ?: 'admin@example.com'}"
                    )
                } catch (Exception e) {
                    echo "Could not send email notification: ${e.getMessage()}"
                }
            }
        }
    }
}