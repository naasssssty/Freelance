pipeline {
    agent any
    tools {
        nodejs 'Node 21'
    }
    environment {
        IMAGE_TAG = '28'
        IMAGE_NAME = "papadooo/freelance-frontend:${IMAGE_TAG}"
        CI = 'true'
    }
    stages {
        stage('Checkout') {
            steps {
                // Καθαρίζουμε πρώτα τον workspace
                cleanWs()
                
                // Checkout code from GitHub repository με περισσότερες λεπτομέρειες
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'test-branch']],
                    extensions: [[$class: 'CloneOption', depth: 1, noTags: false, reference: '', shallow: true]],
                    userRemoteConfigs: [[url: 'https://github.com/naasssssty/Freelance.git']]
                ])
            }
        }
        stage('Install Dependencies') {
            steps {
                // Install npm dependencies for frontend
                dir('frontend') {
                    sh 'npm ci'
                    sh 'npm audit --audit-level=high || true'
                }
            }
        }
        stage('Lint') {
            steps {
                // Run ESLint for code quality
                dir('frontend') {
                    sh 'npx eslint src/ --ext .js,.jsx || true'
                }
            }
        }
        stage('Unit Tests') {
            steps {
                // Run unit tests with coverage
                dir('frontend') {
                    sh 'npm run test:ci'
                }
            }
            post {
                always {
                    echo 'Unit tests completed'
                }
            }
        }
        stage('Integration Tests') {
            steps {
                // Run integration tests (if any)
                dir('frontend') {
                    sh 'npm run test -- --testPathPattern=integration --watchAll=false --coverage=false || true'
                }
            }
        }
        stage('Security Audit') {
            steps {
                // Run security audit
                dir('frontend') {
                    sh 'npm audit --audit-level=moderate || true'
                }
            }
        }
        stage('Build') {
            steps {
                // Build the frontend using npm
                dir('frontend') {
                    sh 'npm run build'
                }
            }
            post {
                success {
                    // Archive build artifacts
                    archiveArtifacts artifacts: 'frontend/build/**/*', fingerprint: true
                }
            }
        }
        stage('Build Performance Tests') {
            steps {
                // Analyze build size and performance
                dir('frontend') {
                    sh '''
                        echo "Build size analysis:"
                        du -sh build/
                        echo "Largest files in build:"
                        find build/ -type f -exec du -h {} + | sort -rh | head -10
                    '''
                }
            }
        }
        stage('Check Docker Access') {
            steps {
                // Check if Docker is accessible
                sh 'docker info || echo "Docker access failed. Ensure Jenkins has permission to access Docker daemon."'
            }
        }
        stage('Build Docker Image') {
            steps {
                withEnv(["PATH+EXTRA=/usr/local/bin"]) {
                    dir('frontend') {
                        sh "docker build -f ../docker/Dockerfile.frontend -t ${IMAGE_NAME} ."
                    }
                }
            }
        }
        stage('Docker Security Scan') {
            steps {
                // Scan Docker image for vulnerabilities
                script {
                    try {
                        sh "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image ${IMAGE_NAME} || true"
                    } catch (Exception e) {
                        echo "Security scan failed: ${e.getMessage()}"
                    }
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                    sh "docker push ${IMAGE_NAME}"
                }
            }
        }
        stage('Cleanup') {
            steps {
                // Clean up Docker images to save space
                sh "docker rmi ${IMAGE_NAME} || true"
                sh 'docker system prune -f || true'
            }
        }
    }
    post {
        always {
            echo 'Frontend pipeline completed.'
            
            // Clean workspace
            cleanWs()
        }
        success {
            echo 'Frontend pipeline completed successfully!'
        }
        failure {
            echo 'Frontend pipeline failed. Check the logs for details.'
        }
        unstable {
            echo 'Frontend pipeline is unstable. Some tests may have failed.'
        }
    }
}