pipeline {
    agent any
    tools {
        nodejs 'Node 21'
    }
    environment {
        DOCKER_IMAGE = "papadooo/freelance-frontend:${env.BUILD_NUMBER}"
        CI = 'true'
        GENERATE_SOURCEMAP = 'false'
    }
    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Checking out frontend code...'
                git branch: 'test', url: 'https://github.com/naasssssty/Freelance.git'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Installing frontend dependencies...'
                dir('frontend') {
                    script {
                        try {
                            // Clean only node_modules, keep package-lock.json for npm ci
                            sh 'rm -rf node_modules || true'
                            
                            // Try npm ci first (faster and more reliable)
                            retry(3) {
                                sh 'npm ci --prefer-offline --timeout=300000'
                            }
                        } catch (Exception e) {
                            echo "npm ci failed, trying npm install as fallback: ${e.getMessage()}"
                            // Only remove package-lock.json if npm ci fails
                            sh 'rm -rf package-lock.json || true'
                            sh 'npm install --timeout=300000'
                        }
                    }
                }
            }
        }
        
        stage('Lint') {
            steps {
                echo 'üîç Running ESLint for code quality...'
                dir('frontend') {
                    script {
                        try {
                            // Try to fix auto-fixable issues first
                            sh 'npm run lint:fix || true'
                            // Then run the actual lint check
                            sh 'npm run lint'
                        } catch (Exception e) {
                            echo "ESLint found issues: ${e.getMessage()}"
                            // Don't fail the build for linting issues, just warn
                            sh 'npm run lint || true'
                        }
                    }
                }
            }
        }
        
        stage('Unit Tests') {
            environment {
                // Jest test environment
                CI = 'true'
                NODE_ENV = 'test'
            }
            steps {
                echo 'üß™ Running unit tests...'
                dir('frontend') {
                    // Use the new test:ci script
                    sh 'npm run test:ci'
                }
            }
            post {
                always {
                    // Archive coverage reports as artifacts for now
                    script {
                        try {
                            archiveArtifacts(
                                artifacts: 'frontend/coverage/**/*',
                                allowEmptyArchive: true
                            )
                            echo "‚úÖ Coverage reports archived successfully"
                        } catch (Exception e) {
                            echo "Could not archive coverage reports: ${e.getMessage()}"
                        }
                    }
                }
            }
        }
        
        stage('Integration Tests') {
            environment {
                // Integration test environment
                CI = 'true'
                NODE_ENV = 'test'
                REACT_APP_API_URL = 'http://localhost:8080'
            }
            steps {
                echo 'üîó Running integration tests...'
                dir('frontend') {
                    script {
                        try {
                            // Run integration tests with coverage
                            sh 'npm run test:integration:coverage'
                        } catch (Exception e) {
                            echo "Integration tests failed: ${e.getMessage()}"
                            // Don't fail the pipeline for integration test failures in development
                            sh 'echo "Integration tests completed with issues"'
                        }
                    }
                }
            }
            post {
                always {
                    // Archive integration test results
                    archiveArtifacts(
                        artifacts: 'frontend/coverage/**/*',
                        allowEmptyArchive: true
                    )
                }
            }
        }
        
        stage('Build') {
            steps {
                echo 'üèóÔ∏è Building frontend application...'
                dir('frontend') {
                    sh 'npm run build'
                }
            }
            post {
                always {
                    // Archive build artifacts
                    archiveArtifacts(
                        artifacts: 'frontend/build/**/*',
                        allowEmptyArchive: true
                    )
                }
            }
        }
        
        stage('Security Audit') {
            steps {
                echo 'üîí Running security audit...'
                dir('frontend') {
                    sh 'npm audit --audit-level=moderate || true'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Building Docker image...'
                // Build Docker image for frontend using the correct Dockerfile
                sh 'docker build -t $DOCKER_IMAGE -f docker/Dockerfile.frontend frontend/'
                // Tag with latest for local use
                sh 'docker tag $DOCKER_IMAGE papadooo/freelance-frontend:latest'
            }
        }
        
        stage('Push Docker Image') {
            steps {
                echo 'üì§ Pushing Docker image to registry...'
                // Push Docker image to Docker Hub
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                    sh 'docker push $DOCKER_IMAGE'
                    sh 'docker push papadooo/freelance-frontend:latest'
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'kubeconfig-secret', variable: 'KUBECONFIG')]) {
                        echo 'üöÄ Preparing for Kubernetes deployment...'
                        
                        // Create properly patched kubeconfig
                        sh '''
                            # Copy original kubeconfig
                            cp "$KUBECONFIG" /tmp/kubeconfig_original.yaml
                            
                            # Create patched version for container access
                            cp "$KUBECONFIG" /tmp/kubeconfig_patched.yaml
                            
                            # Replace all instances of 127.0.0.1 with host.docker.internal
                            sed -i 's#127\\.0\\.0\\.1#host.docker.internal#g' /tmp/kubeconfig_patched.yaml
                            sed -i 's#localhost#host.docker.internal#g' /tmp/kubeconfig_patched.yaml
                            
                            echo "‚úÖ Kubeconfig patched successfully"
                            echo "üìÑ Server configuration:"
                            grep -n "server:" /tmp/kubeconfig_patched.yaml || echo "No server found"
                        '''
                        
                        // Set the patched kubeconfig
                        env.KUBECONFIG = '/tmp/kubeconfig_patched.yaml'

                        // Test connectivity with timeout
                        sh '''
                            echo "üîç Testing Kubernetes connectivity..."
                            timeout 60s kubectl cluster-info --kubeconfig=$KUBECONFIG || {
                                echo "‚ùå Kubernetes connectivity failed"
                                echo "üìã Kubeconfig content:"
                                cat $KUBECONFIG
                                exit 1
                            }
                            echo "‚úÖ Kubernetes connectivity confirmed"
                        '''
                        
                        // Ensure namespace exists
                        sh '''
                            echo "üìÅ Ensuring namespace exists..."
                            kubectl create namespace freelance --kubeconfig=$KUBECONFIG --dry-run=client -o yaml | kubectl apply --kubeconfig=$KUBECONFIG -f -
                        '''

                        // Deploy using Ansible with correct image tag
                        sh """
                            echo "üöÄ Deploying frontend with image: $DOCKER_IMAGE"
                            ansible-playbook ansible/deploy-kubernetes.yml -i ansible/inventory.yml \\
                                --extra-vars "frontend_image=$DOCKER_IMAGE" \\
                                --extra-vars "kubeconfig_path=$KUBECONFIG" \\
                                -v
                        """
                        
                        // Verify deployment
                        sh '''
                            echo "üîç Verifying deployment..."
                            kubectl get pods -n freelance --kubeconfig=$KUBECONFIG
                            kubectl get services -n freelance --kubeconfig=$KUBECONFIG
                        '''
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'üèÅ Frontend pipeline completed.'
            // Archive test reports
            archiveArtifacts(
                artifacts: 'frontend/coverage/**/*',
                allowEmptyArchive: true
            )
            // Clean up temporary files
            sh 'rm -f /tmp/kubeconfig_*.yaml || true'
        }
        success {
            echo '‚úÖ Frontend pipeline completed successfully!'
            echo 'Docker image built and pushed: ' + env.DOCKER_IMAGE
        }
        failure {
            echo '‚ùå Frontend pipeline failed. Check the logs for details.'
        }
    }
}