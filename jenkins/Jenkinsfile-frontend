pipeline {
    agent any
    tools {
        nodejs 'Node 21'
    }
    environment {
        DOCKER_IMAGE = "papadooo/freelance-frontend:${env.BUILD_NUMBER}"
        CI = 'true'
        GENERATE_SOURCEMAP = 'false'
    }
    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Checking out frontend code...'
                git branch: 'test-branch', url: 'https://github.com/naasssssty/Freelance.git'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Installing frontend dependencies...'
                dir('frontend') {
                    script {
                        try {
                            // Clean workspace first
                            echo 'üßπ Cleaning workspace...'
                            sh 'rm -rf node_modules package-lock.json .npm || true'
                            sh 'npm cache clean --force || true'
                            
                            // Try npm ci first
                            echo 'üì¶ Attempting npm ci...'
                            retry(2) {
                                sh 'npm ci --no-optional --no-audit --no-fund --prefer-offline --timeout=600000'
                            }
                        } catch (Exception e) {
                            echo "npm ci failed, trying clean install: ${e.getMessage()}"
                            
                            // Fallback to npm install with clean cache
                            sh 'rm -rf node_modules package-lock.json .npm || true'
                            sh 'npm cache clean --force'
                            sh 'npm install --no-optional --no-audit --no-fund --timeout=600000'
                        }
                        
                        // Verify installation
                        sh 'npm ls --depth=0 || true'
                        echo '‚úÖ Dependencies installed successfully!'
                    }
                }
            }
        }
        
        stage('Lint') {
            steps {
                echo 'üîç Running ESLint for code quality...'
                dir('frontend') {
                    // Since there's no lint script, we'll run eslint directly
                    sh 'npx eslint src --ext .js,.jsx --max-warnings 0 || true'
                }
            }
        }
        
        stage('Unit Tests') {
            environment {
                // Jest test environment
                CI = 'true'
                NODE_ENV = 'test'
            }
            steps {
                echo 'üß™ Running unit tests...'
                dir('frontend') {
                    // Run tests without jest-junit for now, just with coverage
                    sh 'npm test -- --coverage --coverageReporters=text-lcov --coverageReporters=html --passWithNoTests --watchAll=false'
                }
            }
            post {
                always {
                    // Archive coverage reports as artifacts for now
                    script {
                        try {
                            archiveArtifacts(
                                artifacts: 'frontend/coverage/**/*',
                                allowEmptyArchive: true
                            )
                            echo "‚úÖ Coverage reports archived successfully"
                        } catch (Exception e) {
                            echo "Could not archive coverage reports: ${e.getMessage()}"
                        }
                    }
                }
            }
        }
        
        stage('Integration Tests') {
            environment {
                // Integration test environment
                CI = 'true'
                NODE_ENV = 'test'
                REACT_APP_API_URL = 'http://localhost:8080'
            }
            steps {
                echo 'üîó Running integration tests...'
                dir('frontend') {
                    // For now, we'll run the same tests but in integration mode
                    // Later you can add specific integration tests
                    sh 'npm test -- --testPathPattern="integration|e2e" --passWithNoTests --watchAll=false || echo "No integration tests found yet"'
                }
            }
            post {
                always {
                    // Archive integration test results
                    archiveArtifacts(
                        artifacts: 'frontend/coverage/**/*',
                        allowEmptyArchive: true
                    )
                }
            }
        }
        
        stage('Build') {
            steps {
                echo 'üèóÔ∏è Building frontend application...'
                dir('frontend') {
                    sh 'npm run build'
                }
            }
            post {
                always {
                    // Archive build artifacts
                    archiveArtifacts(
                        artifacts: 'frontend/build/**/*',
                        allowEmptyArchive: true
                    )
                }
            }
        }
        
        stage('Security Audit') {
            steps {
                echo 'üîí Running security audit...'
                dir('frontend') {
                    sh 'npm audit --audit-level=moderate || true'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Building Docker image...'
                // Build Docker image for frontend using the correct Dockerfile
                sh 'docker build -t $DOCKER_IMAGE -f docker/Dockerfile.frontend frontend/'
            }
        }
        
        stage('Push Docker Image') {
            steps {
                echo 'üì§ Pushing Docker image to registry...'
                // Push Docker image to Docker Hub
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                    sh 'docker push $DOCKER_IMAGE'
                }
            }
        }
    }
    post {
        always {
            echo 'üèÅ Frontend pipeline completed.'
            // Archive test reports
            archiveArtifacts(
                artifacts: 'frontend/coverage/**/*',
                allowEmptyArchive: true
            )
        }
        success {
            echo '‚úÖ Frontend pipeline completed successfully!'
            echo 'Docker image built and pushed: ' + env.DOCKER_IMAGE
        }
        failure {
            echo '‚ùå Frontend pipeline failed. Check the logs for details.'
        }
    }
}