pipeline {
    agent {
        label 'docker-agent'
    }
    
    tools {
        nodejs 'Node 21'
    }
    
    environment {
        // Docker configuration
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_REPO = 'papadooo/freelance-frontend'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        IMAGE_NAME = "${DOCKER_REPO}:${IMAGE_TAG}"
        LATEST_IMAGE = "${DOCKER_REPO}:latest"
        
        // Application configuration
        NODE_ENV = 'production'
        
        // Deployment configuration
        DEPLOY_ENV = 'staging'
        HEALTH_CHECK_URL = 'http://localhost:3000'
        
        // Notification configuration
        SLACK_CHANNEL = '#devops-notifications'
        EMAIL_RECIPIENTS = 'dev-team@company.com'
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
        retry(2)
    }
    
    stages {
        stage('🚀 Pipeline Start') {
            steps {
                script {
                    echo "🚀 Starting Frontend Pipeline"
                    echo "📋 Build Number: ${env.BUILD_NUMBER}"
                    echo "🌿 Branch: ${env.BRANCH_NAME ?: 'test-branch'}"
                    echo "🏷️ Image Tag: ${IMAGE_TAG}"
                    echo "📅 Build Time: ${new Date()}"
                }
            }
        }
        
        stage('🧹 Cleanup & Checkout') {
            steps {
                script {
                    echo "🧹 Cleaning workspace..."
                    cleanWs()
                    
                    echo "📥 Checking out source code..."
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/test-branch']],
                        extensions: [
                            [$class: 'CloneOption', depth: 1, noTags: false, reference: '', shallow: true],
                            [$class: 'CheckoutOption', timeout: 20]
                        ],
                        userRemoteConfigs: [[
                            url: 'https://github.com/naasssssty/Freelance.git',
                            credentialsId: 'github-credentials'
                        ]]
                    ])
                }
            }
        }
        
        stage('🔍 Code Analysis & Security Scan') {
            parallel {
                stage('📊 Code Quality Check') {
                    steps {
                        dir('frontend') {
                            echo "📊 Running ESLint..."
                            sh 'npm install --only=dev'
                            sh 'npx eslint src/ --format junit --output-file eslint-report.xml || true'
                            
                            echo "🔍 Checking for vulnerabilities..."
                            sh 'npm audit --audit-level moderate || true'
                            sh 'npm audit --json > npm-audit.json || true'
                        }
                    }
                }
                
                stage('🔐 Security Scan') {
                    steps {
                        dir('frontend') {
                            echo "🔐 Running security checks..."
                            sh '''
                                # Check for sensitive data in code
                                echo "Checking for potential secrets..."
                                grep -r -i "password\\|secret\\|key\\|token" src/ --exclude-dir=node_modules || echo "No sensitive data found"
                                
                                # Check package.json for known vulnerabilities
                                echo "Checking package dependencies..."
                                npm audit --audit-level high || echo "Audit completed with warnings"
                            '''
                        }
                    }
                }
            }
        }
        
        stage('📦 Install Dependencies') {
            steps {
                dir('frontend') {
                    echo "📦 Installing npm dependencies..."
                    sh '''
                        echo "Node version: $(node --version)"
                        echo "NPM version: $(npm --version)"
                        
                        # Clean install for reproducible builds
                        npm ci --prefer-offline --no-audit
                        
                        echo "✅ Dependencies installed successfully"
                        npm list --depth=0 || true
                    '''
                }
            }
        }
        
        stage('🧪 Run Tests') {
            parallel {
                stage('🧪 Unit Tests') {
                    steps {
                        dir('frontend') {
                            echo "🧪 Running unit tests..."
                            sh '''
                                # Run tests with coverage
                                CI=true npm test -- --coverage --watchAll=false --testResultsProcessor=jest-junit --coverageReporters=text-lcov --coverageReporters=html
                                
                                # Generate test report
                                echo "✅ Unit tests completed"
                            '''
                        }
                    }
                    post {
                        always {
                            publishTestResults testResultsPattern: 'frontend/junit.xml'
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'frontend/coverage/lcov-report',
                                reportFiles: 'index.html',
                                reportName: 'Coverage Report'
                            ])
                        }
                    }
                }
                
                stage('🔧 Integration Tests') {
                    steps {
                        dir('frontend') {
                            echo "🔧 Running integration tests..."
                            sh '''
                                # Mock API integration tests
                                echo "Running integration tests..."
                                
                                # Test build artifacts
                                echo "Testing build process..."
                                npm run build
                                
                                # Verify build output
                                if [ -d "build" ]; then
                                    echo "✅ Build directory created successfully"
                                    ls -la build/
                                else
                                    echo "❌ Build failed - no build directory found"
                                    exit 1
                                fi
                            '''
                        }
                    }
                }
            }
        }
        
        stage('🏗️ Build Application') {
            steps {
                dir('frontend') {
                    echo "🏗️ Building React application..."
                    sh '''
                        echo "Building for production..."
                        
                        # Set production environment
                        export REACT_APP_ENV=production
                        export GENERATE_SOURCEMAP=false
                        
                        # Build the application
                        npm run build
                        
                        # Verify build
                        if [ -d "build" ] && [ "$(ls -A build)" ]; then
                            echo "✅ Build completed successfully"
                            echo "📊 Build size:"
                            du -sh build/
                            echo "📁 Build contents:"
                            ls -la build/
                        else
                            echo "❌ Build failed or empty"
                            exit 1
                        fi
                    '''
                }
            }
        }
        
        stage('🐳 Docker Operations') {
            parallel {
                stage('🐳 Build Docker Image') {
                    steps {
                        script {
                            echo "🐳 Building Docker image..."
                            sh '''
                                echo "Building Docker image: ${IMAGE_NAME}"
                                
                                # Build with proper context and dockerfile
                                docker build \
                                    -f docker/Dockerfile.frontend \
                                    -t ${IMAGE_NAME} \
                                    -t ${LATEST_IMAGE} \
                                    --build-arg NODE_ENV=production \
                                    --label "build.number=${BUILD_NUMBER}" \
                                    --label "build.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
                                    --label "git.commit=${GIT_COMMIT}" \
                                    frontend/
                                
                                echo "✅ Docker image built successfully"
                                docker images | grep freelance-frontend
                            '''
                        }
                    }
                }
                
                stage('🔍 Image Security Scan') {
                    steps {
                        echo "🔍 Scanning Docker image for vulnerabilities..."
                        sh '''
                            # Basic image inspection
                            echo "📋 Image details:"
                            docker inspect ${IMAGE_NAME} --format='{{.Config.ExposedPorts}}' || true
                            docker inspect ${IMAGE_NAME} --format='{{.Config.User}}' || true
                            
                            # Check image size
                            echo "📊 Image size:"
                            docker images ${IMAGE_NAME} --format "table {{.Repository}}\\t{{.Tag}}\\t{{.Size}}"
                            
                            echo "✅ Image security scan completed"
                        '''
                    }
                }
            }
        }
        
        stage('🧪 Container Testing') {
            steps {
                echo "🧪 Testing Docker container..."
                sh '''
                    echo "🚀 Starting container for testing..."
                    
                    # Start container in detached mode
                    CONTAINER_ID=$(docker run -d -p 3001:80 --name frontend-test-${BUILD_NUMBER} ${IMAGE_NAME})
                    echo "Container ID: $CONTAINER_ID"
                    
                    # Wait for container to start
                    sleep 10
                    
                    # Health check
                    echo "🏥 Performing health check..."
                    for i in {1..5}; do
                        if curl -f http://localhost:3001 > /dev/null 2>&1; then
                            echo "✅ Health check passed on attempt $i"
                            break
                        else
                            echo "⏳ Health check failed on attempt $i, retrying..."
                            sleep 5
                        fi
                        
                        if [ $i -eq 5 ]; then
                            echo "❌ Health check failed after 5 attempts"
                            docker logs frontend-test-${BUILD_NUMBER}
                            exit 1
                        fi
                    done
                    
                    # Basic functionality test
                    echo "🔧 Testing basic functionality..."
                    RESPONSE=$(curl -s http://localhost:3001)
                    if echo "$RESPONSE" | grep -q "FreelancerProject\\|React App"; then
                        echo "✅ Application is serving content correctly"
                    else
                        echo "❌ Application not responding correctly"
                        echo "Response: $RESPONSE"
                        exit 1
                    fi
                '''
            }
            post {
                always {
                    sh '''
                        echo "🧹 Cleaning up test container..."
                        docker stop frontend-test-${BUILD_NUMBER} || true
                        docker rm frontend-test-${BUILD_NUMBER} || true
                    '''
                }
            }
        }
        
        stage('📤 Push to Registry') {
            when {
                anyOf {
                    branch 'main'
                    branch 'test-branch'
                    branch 'develop'
                }
            }
            steps {
                echo "📤 Pushing Docker image to registry..."
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh '''
                        echo "🔐 Logging into Docker registry..."
                        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                        
                        echo "📤 Pushing images..."
                        docker push ${IMAGE_NAME}
                        docker push ${LATEST_IMAGE}
                        
                        echo "✅ Images pushed successfully"
                        echo "🏷️ Tagged as: ${IMAGE_NAME}"
                        echo "🏷️ Tagged as: ${LATEST_IMAGE}"
                    '''
                }
            }
        }
        
        stage('🚀 Deploy to Staging') {
            when {
                anyOf {
                    branch 'test-branch'
                    branch 'develop'
                }
            }
            steps {
                echo "🚀 Deploying to staging environment..."
                sh '''
                    echo "🔧 Preparing deployment..."
                    
                    # Create deployment script
                    cat > deploy-staging.sh << 'EOF'
#!/bin/bash
set -e

echo "🚀 Deploying Frontend to Staging..."

# Stop existing container
docker stop freelance-frontend-staging || true
docker rm freelance-frontend-staging || true

# Run new container
docker run -d \
    --name freelance-frontend-staging \
    --restart unless-stopped \
    -p 3000:80 \
    -e NODE_ENV=production \
    ${IMAGE_NAME}

echo "✅ Deployment completed successfully"
echo "🌐 Application available at: http://localhost:3000"
EOF
                    
                    chmod +x deploy-staging.sh
                    ./deploy-staging.sh
                    
                    # Verify deployment
                    sleep 15
                    if curl -f http://localhost:3000 > /dev/null 2>&1; then
                        echo "✅ Staging deployment successful"
                    else
                        echo "❌ Staging deployment failed"
                        docker logs freelance-frontend-staging
                        exit 1
                    fi
                '''
            }
        }
        
        stage('🏥 Post-Deploy Health Check') {
            when {
                anyOf {
                    branch 'test-branch'
                    branch 'develop'
                }
            }
            steps {
                echo "🏥 Running post-deployment health checks..."
                sh '''
                    echo "🔍 Checking application health..."
                    
                    # Wait for application to fully start
                    sleep 10
                    
                    # Comprehensive health check
                    for endpoint in "/" "/static/js" "/static/css"; do
                        echo "Testing endpoint: $endpoint"
                        if curl -f "http://localhost:3000$endpoint" > /dev/null 2>&1; then
                            echo "✅ $endpoint is accessible"
                        else
                            echo "⚠️ $endpoint might not be accessible"
                        fi
                    done
                    
                    # Check if React app is loading
                    RESPONSE=$(curl -s http://localhost:3000)
                    if echo "$RESPONSE" | grep -q "root\\|React"; then
                        echo "✅ React application is loading correctly"
                    else
                        echo "⚠️ React application might not be loading correctly"
                    fi
                    
                    echo "🏥 Health check completed"
                '''
            }
        }
    }
    
    post {
        always {
            echo "🧹 Pipeline cleanup..."
            sh '''
                # Clean up test containers
                docker ps -a | grep "frontend-test-" | awk '{print $1}' | xargs -r docker rm -f || true
                
                # Clean up dangling images
                docker image prune -f || true
                
                echo "✅ Cleanup completed"
            '''
            
            // Archive artifacts
            archiveArtifacts artifacts: 'frontend/build/**/*', fingerprint: true, allowEmptyArchive: true
            archiveArtifacts artifacts: 'frontend/coverage/**/*', fingerprint: true, allowEmptyArchive: true
        }
        
        success {
            echo "🎉 Frontend Pipeline completed successfully!"
            script {
                def message = """
🎉 Frontend Build Successful! 
📋 Build: #${env.BUILD_NUMBER}
🌿 Branch: ${env.BRANCH_NAME ?: 'test-branch'}
🏷️ Image: ${IMAGE_NAME}
⏱️ Duration: ${currentBuild.durationString}
🌐 Staging: http://localhost:3000
"""
                echo message
                
                // Send notifications (uncomment when ready)
                // slackSend(channel: env.SLACK_CHANNEL, color: 'good', message: message)
                // emailext(subject: "✅ Frontend Build Success - #${env.BUILD_NUMBER}", 
                //          body: message, to: env.EMAIL_RECIPIENTS)
            }
        }
        
        failure {
            echo "❌ Frontend Pipeline failed!"
            script {
                def message = """
❌ Frontend Build Failed!
📋 Build: #${env.BUILD_NUMBER}
🌿 Branch: ${env.BRANCH_NAME ?: 'test-branch'}
⏱️ Duration: ${currentBuild.durationString}
📋 Check logs: ${env.BUILD_URL}console
"""
                echo message
                
                // Send failure notifications (uncomment when ready)
                // slackSend(channel: env.SLACK_CHANNEL, color: 'danger', message: message)
                // emailext(subject: "❌ Frontend Build Failed - #${env.BUILD_NUMBER}", 
                //          body: message, to: env.EMAIL_RECIPIENTS)
            }
        }
        
        unstable {
            echo "⚠️ Frontend Pipeline completed with warnings!"
        }
        
        aborted {
            echo "🛑 Frontend Pipeline was aborted!"
        }
    }
}