pipeline {
    agent any
    tools {
        nodejs 'Node 21'
    }
    environment {
        DOCKER_IMAGE = "papadooo/freelance-frontend:${env.BUILD_NUMBER}"
        CI = 'true'
        GENERATE_SOURCEMAP = 'false'
    }
    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Checking out frontend code...'
                git branch: 'A', url: 'https://github.com/naasssssty/Freelance.git'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Installing frontend dependencies...'
                dir('frontend') {
                    script {
                        try {
                            // Clean only node_modules, keep package-lock.json for npm ci
                            sh 'rm -rf node_modules || true'
                            
                            // Try npm ci first (faster and more reliable)
                            retry(3) {
                                sh 'npm ci --prefer-offline --timeout=300000'
                            }
                        } catch (Exception e) {
                            echo "npm ci failed, trying npm install as fallback: ${e.getMessage()}"
                            // Only remove package-lock.json if npm ci fails
                            sh 'rm -rf package-lock.json || true'
                            sh 'npm install --timeout=300000'
                        }
                    }
                }
            }
        }
        
        stage('Lint') {
            steps {
                echo 'üîç Running ESLint for code quality...'
                dir('frontend') {
                    script {
                        try {
                            // Try to fix auto-fixable issues first
                            sh 'npm run lint:fix || true'
                            // Then run the actual lint check
                            sh 'npm run lint'
                        } catch (Exception e) {
                            echo "ESLint found issues: ${e.getMessage()}"
                            // Don't fail the build for linting issues, just warn
                            sh 'npm run lint || true'
                        }
                    }
                }
            }
        }
        
        stage('Unit Tests') {
            steps {
                echo 'üß™ Running unit tests with coverage...'
                dir('frontend') {
                    script {
                        try {
                            sh 'npm run test:unit'
                        } catch (Exception e) {
                            echo "Unit tests failed: ${e.getMessage()}"
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
            post {
                always {
                    dir('frontend') {
                        // Archive test results if they exist
                        publishTestResults testResultsPattern: 'coverage/lcov.info'
                        
                        // Archive coverage reports
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: 'coverage/lcov-report',
                            reportFiles: 'index.html',
                            reportName: 'Coverage Report'
                        ])
                    }
                }
            }
        }
        
        stage('Integration Tests') {
            steps {
                echo 'üîó Running integration tests...'
                dir('frontend') {
                    script {
                        try {
                            sh 'npm run test:integration'
                        } catch (Exception e) {
                            echo "Integration tests failed: ${e.getMessage()}"
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
            post {
                always {
                    dir('frontend') {
                        // Archive integration test results
                        archiveArtifacts artifacts: 'coverage/**/*', allowEmptyArchive: true
                    }
                }
            }
        }
        
        stage('Build') {
            steps {
                echo 'üèóÔ∏è Building frontend application...'
                dir('frontend') {
                    sh 'npm run build'
                }
            }
            post {
                always {
                    // Archive build artifacts
                    archiveArtifacts(
                        artifacts: 'frontend/build/**/*',
                        allowEmptyArchive: true
                    )
                }
            }
        }
        
        stage('Security Audit') {
            steps {
                echo 'üîí Running security audit...'
                dir('frontend') {
                    sh 'npm audit --audit-level=moderate || true'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Building Docker image...'
                // Build Docker image for frontend using the correct Dockerfile
                sh 'docker build -t $DOCKER_IMAGE -f docker/Dockerfile.frontend frontend/'
            }
        }
        
        stage('Push Docker Image') {
            steps {
                echo 'üì§ Pushing Docker image to registry...'
                // Push Docker image to Docker Hub
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                    sh 'docker push $DOCKER_IMAGE'
                }
            }
        }
    }
    post {
        always {
            echo 'üèÅ Frontend pipeline completed.'
            // Archive test reports
            archiveArtifacts(
                artifacts: 'frontend/coverage/**/*',
                allowEmptyArchive: true
            )
        }
        success {
            echo '‚úÖ Frontend pipeline completed successfully!'
            echo 'Docker image built and pushed: ' + env.DOCKER_IMAGE
        }
        failure {
            echo '‚ùå Frontend pipeline failed. Check the logs for details.'
        }
    }
}