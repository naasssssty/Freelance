pipeline {
    agent any
    
    tools {
        nodejs 'Node 21'
    }
    
    environment {
        DOCKER_REPO = 'papadooo/freelance-frontend'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        IMAGE_NAME = "${DOCKER_REPO}:${IMAGE_TAG}"
        LATEST_IMAGE = "${DOCKER_REPO}:latest"
        NODE_ENV = 'production'
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 30, unit: 'MINUTES')
        skipDefaultCheckout()
    }
    
    stages {
        stage('üöÄ Pipeline Start') {
            steps {
                script {
                    echo "üöÄ Starting Frontend Pipeline"
                    echo "üìã Build Number: ${env.BUILD_NUMBER}"
                    echo "üåø Branch: ${env.BRANCH_NAME ?: 'test-branch'}"
                    echo "üè∑Ô∏è Image Tag: ${IMAGE_TAG}"
                    echo "üìÖ Build Time: ${new Date()}"
                }
            }
        }
        
        stage('üßπ Cleanup & Checkout') {
            steps {
                script {
                    echo "üßπ Cleaning workspace..."
                    cleanWs()
                    
                    echo "üì• Checking out source code..."
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/test-branch']],
                        extensions: [
                            [$class: 'CloneOption', depth: 1, noTags: false, reference: '', shallow: true]
                        ],
                        userRemoteConfigs: [[
                            url: 'https://github.com/naasssssty/Freelance.git'
                        ]]
                    ])
                }
            }
        }
        
        stage('üîç Code Analysis') {
            parallel {
                stage('üìä Code Quality') {
                    steps {
                        dir('frontend') {
                            echo "üìä Running code quality checks..."
                            sh 'npm install --only=dev || npm install'
                            sh 'npx eslint src/ --format junit --output-file eslint-report.xml || true'
                            sh 'npm audit --audit-level moderate || true'
                        }
                    }
                }
                
                stage('üîê Security Scan') {
                    steps {
                        dir('frontend') {
                            echo "üîê Running security checks..."
                            sh '''
                                echo "Checking for potential secrets..."
                                grep -r -i "password\\|secret\\|key\\|token" src/ --exclude-dir=node_modules || echo "No sensitive data found"
                                echo "Checking package dependencies..."
                                npm audit --audit-level high || echo "Audit completed"
                            '''
                        }
                    }
                }
            }
        }
        
        stage('üì¶ Install Dependencies') {
            steps {
                dir('frontend') {
                    echo "üì¶ Installing npm dependencies..."
                    sh '''
                        echo "Node version: $(node --version)"
                        echo "NPM version: $(npm --version)"
                        npm ci --prefer-offline --no-audit || npm install
                        echo "‚úÖ Dependencies installed successfully"
                    '''
                }
            }
        }
        
        stage('üß™ Run Tests') {
            parallel {
                stage('üß™ Unit Tests') {
                    steps {
                        dir('frontend') {
                            echo "üß™ Running unit tests..."
                            sh '''
                                CI=true npm test -- --coverage --watchAll=false --passWithNoTests || true
                                echo "‚úÖ Unit tests completed"
                            '''
                        }
                    }
                    post {
                        always {
                            script {
                                try {
                                    if (fileExists('frontend/coverage/lcov-report/index.html')) {
                                        publishHTML([
                                            allowMissing: false,
                                            alwaysLinkToLastBuild: true,
                                            keepAll: true,
                                            reportDir: 'frontend/coverage/lcov-report',
                                            reportFiles: 'index.html',
                                            reportName: 'Coverage Report'
                                        ])
                                    }
                                } catch (Exception e) {
                                    echo "Could not publish coverage report: ${e.getMessage()}"
                                }
                            }
                        }
                    }
                }
                
                stage('üîß Integration Tests') {
                    steps {
                        dir('frontend') {
                            echo "üîß Running integration tests..."
                            sh '''
                                echo "Testing build process..."
                                npm run build
                                
                                if [ -d "build" ]; then
                                    echo "‚úÖ Build directory created successfully"
                                    ls -la build/ | head -10
                                else
                                    echo "‚ùå Build failed - no build directory found"
                                    exit 1
                                fi
                            '''
                        }
                    }
                }
            }
        }
        
        stage('üèóÔ∏è Build Application') {
            steps {
                dir('frontend') {
                    echo "üèóÔ∏è Building React application..."
                    sh '''
                        echo "Building for production..."
                        export REACT_APP_ENV=production
                        export GENERATE_SOURCEMAP=false
                        
                        npm run build
                        
                        if [ -d "build" ] && [ "$(ls -A build)" ]; then
                            echo "‚úÖ Build completed successfully"
                            echo "üìä Build size: $(du -sh build/)"
                            echo "üìÅ Build contents:"
                            ls -la build/ | head -10
                        else
                            echo "‚ùå Build failed or empty"
                            exit 1
                        fi
                    '''
                }
            }
        }
        
        stage('üê≥ Docker Build') {
            steps {
                script {
                    echo "üê≥ Building Docker image..."
                    sh '''
                        echo "Building Docker image: ${IMAGE_NAME}"
                        
                        docker build \
                            -f docker/Dockerfile.frontend \
                            -t ${IMAGE_NAME} \
                            -t ${LATEST_IMAGE} \
                            --build-arg NODE_ENV=production \
                            --label "build.number=${BUILD_NUMBER}" \
                            --label "build.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
                            frontend/
                        
                        echo "‚úÖ Docker image built successfully"
                        docker images | grep freelance-frontend || true
                    '''
                }
            }
        }
        
        stage('üß™ Container Test') {
            steps {
                script {
                    echo "üß™ Testing Docker container..."
                    sh '''
                        echo "üöÄ Starting container for testing..."
                        
                        # Start container
                        CONTAINER_ID=$(docker run -d -p 3001:80 --name frontend-test-${BUILD_NUMBER} ${IMAGE_NAME})
                        echo "Container ID: $CONTAINER_ID"
                        
                        # Wait and test
                        sleep 15
                        
                        # Health check
                        for i in {1..5}; do
                            if curl -f http://localhost:3001 > /dev/null 2>&1; then
                                echo "‚úÖ Health check passed on attempt $i"
                                break
                            else
                                echo "‚è≥ Retrying health check... ($i/5)"
                                sleep 5
                            fi
                            
                            if [ $i -eq 5 ]; then
                                echo "‚ùå Health check failed"
                                docker logs frontend-test-${BUILD_NUMBER} || true
                                exit 1
                            fi
                        done
                        
                        # Test content
                        RESPONSE=$(curl -s http://localhost:3001 || echo "curl failed")
                        if echo "$RESPONSE" | grep -q "FreelancerProject\\|React App\\|root"; then
                            echo "‚úÖ Application serving content correctly"
                        else
                            echo "‚ùå Application not responding correctly"
                            echo "Response sample: ${RESPONSE:0:200}..."
                            exit 1
                        fi
                    '''
                }
            }
            post {
                always {
                    sh '''
                        echo "üßπ Cleaning up test container..."
                        docker stop frontend-test-${BUILD_NUMBER} || true
                        docker rm frontend-test-${BUILD_NUMBER} || true
                    '''
                }
            }
        }
        
        stage('üì§ Push to Registry') {
            when {
                anyOf {
                    branch 'main'
                    branch 'test-branch'
                    branch 'develop'
                }
            }
            steps {
                echo "üì§ Pushing Docker image to registry..."
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh '''
                        echo "üîê Logging into Docker registry..."
                        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                        
                        echo "üì§ Pushing images..."
                        docker push ${IMAGE_NAME}
                        docker push ${LATEST_IMAGE}
                        
                        echo "‚úÖ Images pushed successfully"
                        echo "üè∑Ô∏è Tagged as: ${IMAGE_NAME}"
                        echo "üè∑Ô∏è Tagged as: ${LATEST_IMAGE}"
                    '''
                }
            }
        }
        
        stage('üöÄ Deploy Staging') {
            when {
                anyOf {
                    branch 'test-branch'
                    branch 'develop'
                }
            }
            steps {
                echo "üöÄ Deploying to staging..."
                sh '''
                    echo "üîß Preparing deployment..."
                    
                    # Stop existing container
                    docker stop freelance-frontend-staging || true
                    docker rm freelance-frontend-staging || true
                    
                    # Run new container
                    docker run -d \
                        --name freelance-frontend-staging \
                        --restart unless-stopped \
                        -p 3000:80 \
                        -e NODE_ENV=production \
                        ${IMAGE_NAME}
                    
                    echo "‚úÖ Deployment completed"
                    
                    # Verify deployment
                    sleep 15
                    if curl -f http://localhost:3000 > /dev/null 2>&1; then
                        echo "‚úÖ Staging deployment successful"
                        echo "üåê Application available at: http://localhost:3000"
                    else
                        echo "‚ùå Staging deployment failed"
                        docker logs freelance-frontend-staging || true
                        exit 1
                    fi
                '''
            }
        }
        
        stage('üè• Health Check') {
            when {
                anyOf {
                    branch 'test-branch'
                    branch 'develop'
                }
            }
            steps {
                echo "üè• Running health checks..."
                sh '''
                    echo "üîç Checking application health..."
                    sleep 10
                    
                    # Test endpoints
                    for endpoint in "/" "/static/js" "/static/css"; do
                        echo "Testing: $endpoint"
                        if curl -f "http://localhost:3000$endpoint" > /dev/null 2>&1; then
                            echo "‚úÖ $endpoint accessible"
                        else
                            echo "‚ö†Ô∏è $endpoint might not be accessible"
                        fi
                    done
                    
                    # Check React app
                    RESPONSE=$(curl -s http://localhost:3000 || echo "curl failed")
                    if echo "$RESPONSE" | grep -q "root\\|React"; then
                        echo "‚úÖ React application loading correctly"
                    else
                        echo "‚ö†Ô∏è React application might have issues"
                    fi
                    
                    echo "üè• Health check completed"
                '''
            }
        }
    }
    
    post {
        always {
            echo "üßπ Pipeline cleanup..."
            sh '''
                # Clean up test containers
                docker ps -a | grep "frontend-test-" | awk '{print $1}' | xargs -r docker rm -f || true
                
                # Clean up dangling images
                docker image prune -f || true
                
                echo "‚úÖ Cleanup completed"
            '''
            
            // Archive artifacts
            script {
                try {
                    if (fileExists('frontend/build')) {
                        archiveArtifacts artifacts: 'frontend/build/**/*', fingerprint: true, allowEmptyArchive: true
                    }
                    if (fileExists('frontend/coverage')) {
                        archiveArtifacts artifacts: 'frontend/coverage/**/*', fingerprint: true, allowEmptyArchive: true
                    }
                } catch (Exception e) {
                    echo "Could not archive artifacts: ${e.getMessage()}"
                }
            }
        }
        
        success {
            echo "üéâ Frontend Pipeline completed successfully!"
            script {
                def message = """
üéâ Frontend Build Successful! 
üìã Build: #${env.BUILD_NUMBER}
üåø Branch: ${env.BRANCH_NAME ?: 'test-branch'}
üè∑Ô∏è Image: ${IMAGE_NAME}
‚è±Ô∏è Duration: ${currentBuild.durationString}
üåê Staging: http://localhost:3000
"""
                echo message
            }
        }
        
        failure {
            echo "‚ùå Frontend Pipeline failed!"
            script {
                def message = """
‚ùå Frontend Build Failed!
üìã Build: #${env.BUILD_NUMBER}
üåø Branch: ${env.BRANCH_NAME ?: 'test-branch'}
‚è±Ô∏è Duration: ${currentBuild.durationString}
üìã Logs: ${env.BUILD_URL}console
"""
                echo message
            }
        }
        
        unstable {
            echo "‚ö†Ô∏è Frontend Pipeline completed with warnings!"
        }
        
        aborted {
            echo "üõë Frontend Pipeline was aborted!"
        }
    }
}