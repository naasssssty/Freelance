---
- name: Deploy Freelance platform to Kubernetes
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    kubeconfig_path: "{{ lookup('env', 'KUBECONFIG') | default('~/.kube/config', true) }}"
    manifest_dir: "{{ playbook_dir }}/../kubernetes"
  tasks:
    - name: Ensure namespace exists
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition: "{{ lookup('file', manifest_dir + '/namespace.yml') | from_yaml }}"

    - name: Apply ConfigMap & Secrets
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition: "{{ lookup('file', item) | from_yaml }}"
      loop:
        - "{{ manifest_dir }}/configmap.yml"
        - "{{ manifest_dir }}/secrets.yml"
      loop_control:
        label: "{{ item | basename }}"
      when: lookup('ansible.builtin.file', manifest_dir + '/secrets.yml', errors='ignore') is not none

    - name: Apply Deployments, Services & other manifests
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        namespace: freelance
        definition: "{{ lookup('file', item) | from_yaml }}"
      loop: "{{ lookup('ansible.builtin.fileglob', manifest_dir + '/*.yml', wantlist=True) }}"
      loop_control:
        label: "{{ item | basename }}"
      when: item not in [ manifest_dir + '/namespace.yml', manifest_dir + '/configmap.yml', manifest_dir + '/secrets.yml' ]

    - name: Wait for backend deployment rollout
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Deployment
        namespace: freelance
        name: backend
      register: backend_info

    - name: Wait until backend ready
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition: "{{ backend_info.resources[0] }}"
        wait: yes
        wait_condition:
          type: Available
          status: True
        wait_timeout: 300

    - name: Output service endpoints
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Service
        namespace: freelance
      register: services_info

    - name: Show endpoints
      debug:
        var: "{{ services_info.resources | json_query('[*].{name: metadata.name, type: spec.type, ports: spec.ports[0].nodePort || spec.ports[0].port}') }}" 