---
- name: Deploy Complete Freelance Platform to Kubernetes
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    # --- Configuration ---
    # These values can be overridden by Jenkins using --extra-vars
    acr_name: "ergohubregistry"
    
    # Default tags. Jenkins will override these for the specific service being deployed.
    backend_image_tag: "latest"
    frontend_image_tag: "latest"
    
    # --- Kubernetes Settings ---
    namespace: "freelance"
    kubeconfig_path: "{{ lookup('env', 'KUBECONFIG') | default('~/.kube/config', true) }}"

  tasks:
    - name: Ensure Kubernetes namespace exists
      kubernetes.core.k8s:
        name: "{{ namespace }}"
        api_version: v1
        kind: Namespace
        state: present
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Apply all non-deployment configurations from kubernetes/ directory
      kubernetes.core.k8s:
        state: present
        src: "{{ item }}"
        kubeconfig: "{{ kubeconfig_path }}"
      loop:
        - "kubernetes/namespace.yml"
        - "kubernetes/configmap.yml"
        # Deploy secrets manually or ensure they exist in the cluster
        # - "kubernetes/secrets.yml" 
        - "kubernetes/postgres-deployment.yml"
        - "kubernetes/minio-deployment.yml"
        - "kubernetes/mailhog-deployment.yml"
        - "kubernetes/ingress.yml"

    - name: Get Backend Deployment manifest
      kubernetes.core.k8s_info:
        kind: Deployment
        name: backend
        namespace: "{{ namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"
      register: backend_deployment_info

    - name: Update and apply Backend Deployment
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        definition: "{{ backend_deployment_info.resources[0] | combine({'spec': {'template': {'spec': {'containers': [{'name': 'backend', 'image': acr_name + '.azurecr.io/freelance-backend:' + backend_image_tag }]}}}}, recursive=True) }}"

    - name: Get Frontend Deployment manifest
      kubernetes.core.k8s_info:
        kind: Deployment
        name: frontend
        namespace: "{{ namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"
      register: frontend_deployment_info

    - name: Update and apply Frontend Deployment
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        definition: "{{ frontend_deployment_info.resources[0] | combine({'spec': {'template': {'spec': {'containers': [{'name': 'frontend', 'image': acr_name + '.azurecr.io/freelance-frontend:' + frontend_image_tag }]}}}}, recursive=True) }}"
        
    - name: Wait for backend rollout to complete
      kubernetes.core.k8s_rollout_status:
        kind: Deployment
        name: backend
        namespace: "{{ namespace }}"
        wait_timeout: 300
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Wait for frontend rollout to complete
      kubernetes.core.k8s_rollout_status:
        kind: Deployment
        name: frontend
        namespace: "{{ namespace }}"
        wait_timeout: 300
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Show all pods
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Pod
        namespace: freelance
      register: pods_info

    - name: Display pods status
      debug:
        msg: "Pod {{ item.metadata.name }} is {{ item.status.phase }}"
      loop: "{{ pods_info.resources }}"

    - name: Show all services
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Service
        namespace: freelance
      register: services_info

    - name: Display services
      debug:
        msg: "Service {{ item.metadata.name }} on port {{ item.spec.ports[0].port }}"
      loop: "{{ services_info.resources }}"

    - name: Show Ingress info
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Ingress
        namespace: freelance
      register: ingress_info

    - name: Display Ingress endpoints
      debug:
        msg: "Access at: http://{{ item.spec.rules[0].host }}"
      loop: "{{ ingress_info.resources }}"
      when: ingress_info.resources | length > 0 