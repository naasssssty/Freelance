---
- name: Deploy Freelance Platform to Kubernetes (Jenkins Compatible)
  hosts: localhost
  connection: local
  gather_facts: false
  
  vars:
    namespace: "freelance"
    kubeconfig_path: "{{ kubeconfig_path | default(lookup('env', 'KUBECONFIG') | default('~/.kube/config', true)) }}"
  
  tasks:
    - name: Debug deployment parameters
      debug:
        msg: |
          üöÄ Starting Kubernetes deployment
          - Backend image: {{ backend_image | default('freelance-backend:latest') }}
          - Frontend image: {{ frontend_image | default('freelance-frontend:latest') }}
          - Kubeconfig: {{ kubeconfig_path }}
          - Namespace: {{ namespace }}
        
    - name: Create namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        name: "{{ namespace }}"
        api_version: v1
        kind: Namespace
        state: present
        
    - name: Apply ConfigMap and Secrets
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        src: ../kubernetes/configmap.yml
        state: present
        
    - name: Deploy PostgreSQL
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        src: ../kubernetes/postgres-deployment.yml
        state: present
        
    - name: Deploy MailHog
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        src: ../kubernetes/mailhog-deployment.yml
        state: present
        
    - name: Deploy MinIO
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        src: ../kubernetes/minio-deployment.yml
        state: present
        
    - name: Wait for infrastructure services to be ready
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: Pod
        namespace: "{{ namespace }}"
        label_selectors:
          - app in (postgres,mailhog,minio)
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: 300
        
    - name: Apply Nginx ConfigMap
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        src: ../kubernetes/nginx-configmap.yml
        state: present
        
    - name: Update backend deployment with new image
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: backend
            namespace: "{{ namespace }}"
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: backend
            template:
              metadata:
                labels:
                  app: backend
              spec:
                containers:
                - name: backend
                  image: "{{ backend_image | default('papadooo/freelance-backend:latest') }}"
                  imagePullPolicy: Always
                  ports:
                  - containerPort: 8080
                  envFrom:
                  - configMapRef:
                      name: freelance-config
                  - secretRef:
                      name: freelance-secrets
                  resources:
                    requests:
                      memory: "512Mi"
                      cpu: "500m"
                    limits:
                      memory: "1Gi"
                      cpu: "1000m"
                  livenessProbe:
                    httpGet:
                      path: /actuator/health
                      port: 8080
                    initialDelaySeconds: 180
                    periodSeconds: 30
                    timeoutSeconds: 5
                    failureThreshold: 5
                  readinessProbe:
                    httpGet:
                      path: /actuator/health
                      port: 8080
                    initialDelaySeconds: 90
                    periodSeconds: 15
                    timeoutSeconds: 5
                    failureThreshold: 10
                    
    - name: Ensure backend service exists
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: backend-service
            namespace: "{{ namespace }}"
          spec:
            selector:
              app: backend
            ports:
            - name: http
              port: 8080
              targetPort: 8080
              protocol: TCP
            type: ClusterIP
        
    - name: Update frontend deployment with new image
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: frontend
            namespace: "{{ namespace }}"
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: frontend
            template:
              metadata:
                labels:
                  app: frontend
              spec:
                containers:
                - name: frontend
                  image: "{{ frontend_image | default('papadooo/freelance-frontend:latest') }}"
                  imagePullPolicy: Always
                  ports:
                  - containerPort: 80
                  resources:
                    requests:
                      memory: "128Mi"
                      cpu: "100m"
                    limits:
                      memory: "256Mi"
                      cpu: "200m"
                  volumeMounts:
                  - name: nginx-config
                    mountPath: /etc/nginx/conf.d/default.conf
                    subPath: default.conf
                  livenessProbe:
                    httpGet:
                      path: /
                      port: 80
                    initialDelaySeconds: 30
                    periodSeconds: 30
                  readinessProbe:
                    httpGet:
                      path: /
                      port: 80
                    initialDelaySeconds: 10
                    periodSeconds: 10
                volumes:
                - name: nginx-config
                  configMap:
                    name: nginx-config
                    
    - name: Ensure frontend service exists
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: frontend-service
            namespace: "{{ namespace }}"
          spec:
            selector:
              app: frontend
            ports:
            - name: http
              port: 80
              targetPort: 80
              protocol: TCP
            type: ClusterIP
        
    - name: Wait for application services to be ready
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: apps/v1
        kind: Deployment
        namespace: "{{ namespace }}"
        name: "{{ item }}"
        wait: true
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 300
      loop:
        - backend
        - frontend
        
    - name: Deploy Ingress
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        src: ../kubernetes/ingress.yml
        state: present
        
    - name: Display deployment status
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: Pod
        namespace: "{{ namespace }}"
      register: pods
      
    - name: Show deployment summary
      debug:
        msg: |
          ‚úÖ Deployment completed successfully!
          
          üê≥ Images used:
          - Backend: {{ backend_image | default('papadooo/freelance-backend:latest') }}
          - Frontend: {{ frontend_image | default('papadooo/freelance-frontend:latest') }}
          
          üìä Pod Status:
          {% for pod in pods.resources %}
          - {{ pod.metadata.name }}: {{ pod.status.phase }}
          {% endfor %}
          
          üåê Access: http://freelance.local 