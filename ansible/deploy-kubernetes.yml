---
- name: Deploy Freelance Platform to Kubernetes (Jenkins Compatible)
  hosts: localhost
  connection: local
  gather_facts: false
  
  vars:
    namespace: "freelance"
    kubeconfig_path: "{{ kubeconfig_path | default(lookup('env', 'KUBECONFIG') | default('~/.kube/config', true)) }}"
  
  tasks:
    - name: Debug deployment parameters
      debug:
        msg: |
          🚀 Starting Kubernetes deployment
          - Backend image: {{ backend_image | default('freelance-backend:latest') }}
          - Frontend image: {{ frontend_image | default('freelance-frontend:latest') }}
          - Kubeconfig: {{ kubeconfig_path }}
          - Namespace: {{ namespace }}
        
    - name: Create namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        name: "{{ namespace }}"
        api_version: v1
        kind: Namespace
        state: present
        
    - name: Apply ConfigMap and Secrets
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        src: ../kubernetes/configmap.yml
        state: present
        
    - name: Deploy PostgreSQL
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        src: ../kubernetes/postgres-deployment.yml
        state: present
        
    - name: Deploy MailHog
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        src: ../kubernetes/mailhog-deployment.yml
        state: present
        
    - name: Deploy MinIO
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        src: ../kubernetes/minio-deployment.yml
        state: present
        
    - name: Wait for infrastructure services to be ready
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: Pod
        namespace: "{{ namespace }}"
        label_selectors:
          - app in (postgres,mailhog,minio)
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: 300
        
    - name: Apply Nginx ConfigMap
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        src: ../kubernetes/nginx-configmap.yml
        state: present
        
    - name: Deploy Backend
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        src: ../kubernetes/backend-deployment.yml
        state: present
        
    - name: Deploy Frontend  
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        src: ../kubernetes/frontend-deployment.yml
        state: present
        
    - name: Wait for application services to be ready
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: apps/v1
        kind: Deployment
        name: "{{ item }}"
        namespace: "{{ namespace }}"
        wait: yes
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 300
      loop:
        - backend
        - frontend
      register: app_deployments
      ignore_errors: yes
      loop_control:
        loop_var: item

    - name: Describe backend pods if deployment failed
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Pod
        namespace: "{{ namespace }}"
        label_selectors:
          - app = backend
      register: backend_pods
      when: >
        app_deployments.results is defined and
        (app_deployments.results | selectattr('item', 'equalto', 'backend') | list | first).failed | default(false)

    - name: Show backend pod description on failure
      ansible.builtin.command: "kubectl describe pod {{ item.metadata.name }} --namespace {{ namespace }} --kubeconfig={{ kubeconfig_path }}"
      loop: "{{ backend_pods.resources }}"
      register: describe_output
      changed_when: false
      when: backend_pods.resources | length > 0
      loop_control:
        loop_var: item

    - name: Print pod description
      ansible.builtin.debug:
        var: item.stdout
      loop: "{{ describe_output.results }}"
      when: describe_output.results is defined
      loop_control:
        loop_var: item

    - name: Fail playbook if backend deployment failed
      ansible.builtin.fail:
        msg: "Backend deployment failed to become ready. Check pod descriptions above."
      when: >
        app_deployments.results is defined and
        (app_deployments.results | selectattr('item', 'equalto', 'backend') | list | first).failed | default(false)

    - name: Deploy Ingress
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        src: ../kubernetes/ingress.yml
        state: present
        
    - name: Display deployment status
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: Pod
        namespace: "{{ namespace }}"
      register: pods
      
    - name: Show deployment summary
      debug:
        msg: |
          ✅ Deployment completed successfully!
          
          🐳 Images used:
          - Backend: {{ backend_image | default('papadooo/freelance-backend:latest') }}
          - Frontend: {{ frontend_image | default('papadooo/freelance-frontend:latest') }}
          
          📊 Pod Status:
          {% for pod in pods.resources %}
          - {{ pod.metadata.name }}: {{ pod.status.phase }}
          {% endfor %}
          
          🌐 Access: http://freelance.local 